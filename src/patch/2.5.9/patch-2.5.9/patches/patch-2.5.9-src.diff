diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' patch-2.5.9-orig/Makefile.in patch-2.5.9-src/Makefile.in
--- patch-2.5.9-orig/Makefile.in	2003-05-20 18:15:48.000000000 +0200
+++ patch-2.5.9-src/Makefile.in	2007-04-24 23:32:58.093750000 +0200
@@ -21,7 +21,8 @@
 #### Start of system configuration section. ####
 
 srcdir = @srcdir@
-VPATH = @srcdir@
+resdir = @top_builddir@/resource
+VPATH = @srcdir@ @srcdir@/pc $(resdir)
 
 @SET_MAKE@
 
@@ -34,14 +35,18 @@ transform = @program_transform_name@
 
 CFLAGS = @CFLAGS@
 CPPFLAGS = @CPPFLAGS@
-DEFS = @DEFS@
+DEFS = -DINSTALLDIR=\"$(prefix)\"  @DEFS@
 EXEEXT = @EXEEXT@
-LDFLAGS = @LDFLAGS@
+LDFLAGS = @LDFLAGS@ $(VERSADD)
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
 OBJEXT = @OBJEXT@
 PACKAGE_NAME = @PACKAGE_NAME@
 PACKAGE_VERSION = @PACKAGE_VERSION@
+VERSION = $(PACKAGE_VERSION)
+MAJOR=$(shell echo $(VERSION) | sed -e "s/\..*$$//")
+MINOR=$(shell echo $(VERSION) | sed -e "s/^[^\.]*\.0*\([^.]*\).*$$/\1/")
+VERSADD = -Wl,--major-image-version=$(MAJOR) -Wl,--minor-image-version=$(MINOR)
 
 prefix = @prefix@
 exec_prefix = @exec_prefix@
@@ -62,8 +67,8 @@ CONFIG_STATUS = config.status
 SHELL = /bin/sh
 
 LIBSRCS = error.c malloc.c memchr.c mkdir.c \
-	realloc.c rmdir.c strcasecmp.c strncasecmp.c
-SRCS = $(LIBSRCS) \
+	realloc.c rmdir.c strcasecmp.c strncasecmp.c hash.c
+SRCS = patch-res.rc $(LIBSRCS) \
 	addext.c argmatch.c backupfile.c \
 	basename.c dirname.c \
 	getopt.c getopt1.c inp.c \
@@ -71,19 +76,20 @@ SRCS = $(LIBSRCS) \
 	patch.c pch.c \
 	quote.c quotearg.c quotesys.c \
 	util.c version.c xmalloc.c
-OBJS = $(LIBOBJS) \
+OBJS = patch-res.o $(LIBOBJS) \
 	addext.$(OBJEXT) argmatch.$(OBJEXT) backupfile.$(OBJEXT) \
 	basename.$(OBJEXT) dirname.$(OBJEXT) \
 	getopt.$(OBJEXT) getopt1.$(OBJEXT) inp.$(OBJEXT) \
 	maketime.$(OBJEXT) partime.$(OBJEXT) \
 	patch.$(OBJEXT) pch.$(OBJEXT) \
 	quote.$(OBJEXT) quotearg.$(OBJEXT) quotesys.$(OBJEXT) \
-	util.$(OBJEXT) version.$(OBJEXT) xmalloc.$(OBJEXT)
+	util.$(OBJEXT) version.$(OBJEXT) xmalloc.$(OBJEXT) \
+	hash.$(OBJEXT) pc_quote.$(OBJEXT) nonposix.$(OBJEXT)
 HDRS = argmatch.h backupfile.h common.h dirname.h \
 	error.h getopt.h gettext.h \
 	inp.h maketime.h partime.h pch.h \
 	quote.h quotearg.h quotesys.h \
-	unlocked-io.h util.h version.h xalloc.h
+	unlocked-io.h util.h version.h xalloc.h hash.h
 MISC = AUTHORS COPYING ChangeLog INSTALL Makefile.in NEWS README \
 	aclocal.m4 \
 	config.hin configure configure.ac \
@@ -105,6 +111,13 @@ installcheck::
 COMPILE = $(CC) -c $(CPPFLAGS) $(DEFS) -Ded_PROGRAM=\"$(ed_PROGRAM)\" \
 	-I. -I$(srcdir) $(CFLAGS)
 
+.SUFFIXES:
+.SUFFIXES: .c .o .exe .rc
+
+# Rule to make compiled resource (Windows)
+.rc.o:
+	windres --include-dir $(resdir) -i $< -o $@
+
 .c.$(OBJEXT):
 	$(COMPILE) $<
 
diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' patch-2.5.9-orig/addext.c patch-2.5.9-src/addext.c
--- patch-2.5.9-orig/addext.c	2003-05-18 07:30:52.000000000 +0200
+++ patch-2.5.9-src/addext.c	2007-04-24 22:41:16.343750000 +0200
@@ -97,15 +97,64 @@ addext (char *filename, char const *ext,
     {
       /* Live within DOS's 8.3 limit.  */
       char *dot = strchr (s, '.');
+      size_t s_ext_len = 0;	/* length of existing extension in `s' */
+
       if (dot)
+	s_ext_len = slen - (dot + 1 - s);
+      else if (ext[0] == '.')
+	{
+	  s[slen++] = '.';
+	  s[slen] = '\0';
+	  dot = s + slen - 1;
+	}
+
+      /* DOS doesn't allow more than a single dot.  */
+      if (ext[0] == '.')
+	{
+	  ext++;
+	  extlen--;
+	}
+
+      /* If EXT is "~N~" and there's not enough space to append it,
+	 lose the leading `~' so that we could salvage more of the
+	 original name ("foo.c" + ".~9~" -> "foo.c9~").  */
+      if (s_ext_len + extlen > 3 && ext[0] == '~' && extlen > 1)
+	{
+	  ext++;
+	  extlen--;
+	}
+      /* If there isn't enough space in the extension to append
+	 EXT, use the base part ("foo.c" + ".~99~" -> "foo99~").  */
+      if (!dot || extlen > 3)
+	{
+	  slen_max = 8;
+	  if (dot)
+	    slen = dot - s;
+	  if (extlen < slen_max)
+	    {
+	      if (slen + extlen > slen_max)
+		slen = slen_max - extlen;
+	    }
+	  /* Else give up and force using E.  We don't allow EXT to
+	     eat up all of the original filename's characters.  That
+	     is, "foo" + ".~3456789~" should NOT yield "3456789~".  */
+	  else if (dot)
 	{
-	  slen -= dot + 1 - s;
-	  s = dot + 1;
 	  slen_max = 3;
+	      extlen = 4;
+	      s = dot + 1;
+	      slen = s_ext_len;
+	    }
 	}
       else
-	slen_max = 8;
-      extlen = 9; /* Don't use EXT.  */
+	{
+	  /* Extension has enough space to append EXT.  */
+	  slen_max = 3;
+	  slen = s_ext_len;
+	  s = dot + 1;
+	  if (slen + extlen > slen_max)
+	    slen = slen_max - extlen;
+	}
     }
 
   if (slen + extlen <= slen_max)
diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' patch-2.5.9-orig/backupfile.c patch-2.5.9-src/backupfile.c
--- patch-2.5.9-orig/backupfile.c	2002-01-16 23:44:24.000000000 +0100
+++ patch-2.5.9-src/backupfile.c	2007-04-24 23:19:23.171875000 +0200
@@ -24,6 +24,8 @@
 # include <config.h>
 #endif
 
+#include "nonposix.h"
+
 #include <stdio.h>
 #include <sys/types.h>
 #if HAVE_STRING_H
@@ -191,7 +193,11 @@ max_backup_version (const char *file, co
 
   while ((dp = readdir (dirp)) != 0)
     {
-      if (!REAL_DIR_ENTRY (dp) || NLENGTH (dp) < file_name_length + 4)
+      if (!REAL_DIR_ENTRY (dp)
+	  /* Under DOS 8+3 file name limits, backup extensions
+	     may consume part of the original name.  */
+	  || (! HAVE_DOS_FILE_NAMES && NLENGTH (dp) < file_name_length + 4)
+	  || NLENGTH (dp) < file_name_length)
 	continue;
 
       this_version = version_number (file, dp->d_name, file_name_length);
@@ -211,18 +217,30 @@ static int
 version_number (const char *base, const char *backup, size_t base_length)
 {
   int version;
-  const char *p;
+  const char *s = base;
+  const char *s_end = base + base_length;
+  const char *p = backup;
 
   version = 0;
-  if (strncmp (base, backup, base_length) == 0
-      && backup[base_length] == '.'
-      && backup[base_length + 1] == '~')
-    {
-      for (p = &backup[base_length + 2]; ISDIGIT (*p); ++p)
+
+  /* This could use `strncmp', but under HAVE_DOS_FILE_NAMES the two
+     files need not compare equal to the full extent of BASE_LENGTH.  */
+  if (! filename_char_eq (*p, *s))
+    return 0;
+  for ( ; s < s_end && filename_char_eq (*p, *s); p++, s++)
+    ;
+  if (p[0] == '.' && p[1] == '~')
+    p += 2;
+  else if (! HAVE_DOS_FILE_NAMES)
+    return 0;
+  else if (*p == '.')	/* the case of foo.99~ vs foo.c */
+    p++;
+
+  for ( ; ISDIGIT (*p); ++p)
 	version = version * 10 + *p - '0';
       if (p[0] != '~' || p[1])
 	version = 0;
-    }
+
   return version;
 }
 #endif /* HAVE_DIR */
diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' patch-2.5.9-orig/common.h patch-2.5.9-src/common.h
--- patch-2.5.9-orig/common.h	2003-05-19 08:57:36.000000000 +0200
+++ patch-2.5.9-src/common.h	2007-04-24 22:32:25.593750000 +0200
@@ -27,6 +27,7 @@
 #endif
 
 #include <config.h>
+#include "nonposix.h"
 
 #include <assert.h>
 #include <stdbool.h>
@@ -146,6 +147,7 @@ XTERN int invc;
 XTERN struct stat instat;
 XTERN bool dry_run;
 XTERN bool posixly_correct;
+XTERN bool unified_reject_files;
 
 XTERN char const *origprae;
 XTERN char const *origbase;
diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' patch-2.5.9-orig/patch.c patch-2.5.9-src/patch.c
--- patch-2.5.9-orig/patch.c	2003-05-20 15:55:03.000000000 +0200
+++ patch-2.5.9-src/patch.c	2007-04-25 00:20:51.453125000 +0200
@@ -67,6 +67,7 @@ static bool similar (char const *, size_
 static bool spew_output (struct outstate *);
 static char const *make_temp (char);
 static int numeric_string (char const *, bool, char const *);
+static void reject_header (const char *filename);
 static void abort_hunk (void);
 static void cleanup (void);
 static void get_some_switches (void);
@@ -91,13 +92,14 @@ static LINENUM last_frozen_line;
 static char const *do_defines; /* symbol to patch using ifdef, ifndef, etc. */
 static char const if_defined[] = "\n#ifdef %s\n";
 static char const not_defined[] = "\n#ifndef %s\n";
-static char const else_defined[] = "\n#else\n";
-static char const end_defined[] = "\n#endif\n";
+static char const else_defined[] = "\n#else /* %s */\n";
+static char const end_defined[] = "\n#endif /* %s */\n";
 
 static int Argc;
 static char * const *Argv;
 
 static FILE *rejfp;  /* reject file pointer */
+static char *global_reject;
 
 static char const *patchname;
 static char *rejname;
@@ -135,7 +137,7 @@ main (int argc, char **argv)
     {
       int i = val ? argmatch (val, quoting_style_args, 0, 0) : -1;
       set_quoting_style ((struct quoting_options *) 0,
-			 i < 0 ? shell_quoting_style : (enum quoting_style) i);
+			 i < 0 ? DEFAULT_QUOTING_STYLE : (enum quoting_style) i);
     }
 
     posixly_correct = getenv ("POSIXLY_CORRECT") != 0;
@@ -172,6 +174,10 @@ main (int argc, char **argv)
     /* Make sure we clean up in case of disaster.  */
     set_signals (false);
 
+    /* initialize global reject file */
+    if (global_reject)
+      init_reject ();
+
     for (
 	open_patch_file (patchname);
 	there_is_another_patch();
@@ -208,7 +214,8 @@ main (int argc, char **argv)
 	    init_output (TMPOUTNAME, exclusive, &outstate);
 	  }
 
-	/* initialize reject file */
+	/* initialize per-patch reject file */
+	if (!global_reject)
 	init_reject ();
 
 	/* find out where all the lines are */
@@ -278,6 +285,8 @@ main (int argc, char **argv)
 
 	    newwhere = pch_newfirst() + last_offset;
 	    if (skip_rest_of_patch) {
+		if (!failed)
+		  reject_header(outname);
 		abort_hunk();
 		failed++;
 		if (verbosity == VERBOSE)
@@ -292,6 +301,8 @@ main (int argc, char **argv)
 		  say ("Patch attempted to create file %s, which already exists.\n",
 		       quotearg (inname));
 
+		if (!failed)
+		  reject_header(outname);
 		abort_hunk();
 		failed++;
 		if (verbosity != SILENT)
@@ -299,6 +310,8 @@ main (int argc, char **argv)
 		       format_linenum (numbuf, newwhere));
 	    }
 	    else if (! apply_hunk (&outstate, where)) {
+		if (!failed)
+		  reject_header(outname);
 		abort_hunk ();
 		failed++;
 		if (verbosity != SILENT)
@@ -332,6 +345,7 @@ main (int argc, char **argv)
 		    fclose (outstate.ofp);
 		    outstate.ofp = 0;
 		  }
+		if (!global_reject)
 		fclose (rejfp);
 		continue;
 	      }
@@ -412,13 +426,13 @@ main (int argc, char **argv)
 	    }
       }
       if (diff_type != ED_DIFF) {
-	if (fclose (rejfp) != 0)
+	if (!global_reject && fclose (rejfp) != 0)
 	    write_fatal ();
 	if (failed) {
 	    somefailed = true;
 	    say ("%d out of %d hunk%s %s", failed, hunk, "s" + (hunk == 1),
 		 skip_rest_of_patch ? "ignored" : "FAILED");
-	    if (outname) {
+	    if (!global_reject && outname) {
 		char *rej = rejname;
 		if (!rejname) {
 		    rej = xmalloc (strlen (outname) + 5);
@@ -430,7 +444,7 @@ main (int argc, char **argv)
 		  {
 		    move_file (TMPREJNAME, &TMPREJNAME_needs_removal,
 			       rej, instat.st_mode, false);
-		    if (! inerrno
+		    if (! inerrno && !s_is_chrblkfifosock(rej)
 			&& (chmod (rej, (instat.st_mode
 					 & ~(S_IXUSR|S_IXGRP|S_IXOTH)))
 			    != 0))
@@ -445,6 +459,20 @@ main (int argc, char **argv)
       }
       set_signals (true);
     }
+    if (global_reject)
+      {
+	if (fclose (rejfp) != 0)
+	  write_fatal ();
+	if (somefailed)
+	  {
+	  say (" -- saving rejects to file %s\n", quotearg (global_reject));
+	  /*if (! dry_run)
+	    {*/
+	      move_file (TMPREJNAME, &TMPREJNAME_needs_removal,
+			 global_reject, 0644, false);
+	    /*}*/
+	  }
+      }
     if (outstate.ofp && (ferror (outstate.ofp) || fclose (outstate.ofp) != 0))
       write_fatal ();
     cleanup ();
@@ -522,6 +550,8 @@ static struct option const longopts[] =
   {"no-backup-if-mismatch", no_argument, NULL, CHAR_MAX + 6},
   {"posix", no_argument, NULL, CHAR_MAX + 7},
   {"quoting-style", required_argument, NULL, CHAR_MAX + 8},
+  {"unified-reject-files", no_argument, NULL, CHAR_MAX + 9},
+  {"global-reject-file", required_argument, NULL, CHAR_MAX + 10},
   {NULL, no_argument, NULL, 0}
 };
 
@@ -580,6 +610,8 @@ static char const *const option_help[] =
 "  --verbose  Output extra information about the work being done.",
 "  --dry-run  Do not actually change any files; just print what would happen.",
 "  --posix  Conform to the POSIX standard.",
+"  --unified-reject-files  Create unified reject files.",
+"  --global-reject-file=file  Put all rejects into one file.",
 "",
 "  -d DIR  --directory=DIR  Change the working directory to DIR first.",
 #if HAVE_SETMODE_DOS
@@ -779,6 +811,12 @@ get_some_switches (void)
 				     (enum quoting_style) i);
 		}
 		break;
+	    case CHAR_MAX + 9:
+		unified_reject_files = true;
+		break;
+	    case CHAR_MAX + 10:
+		global_reject = savestr (optarg);
+		break;
 	    default:
 		usage (stderr, 2);
 	}
@@ -927,6 +965,55 @@ locate_hunk (LINENUM fuzz)
     return 0;
 }
 
+static char *
+format_timestamp (char timebuf[37], bool which)
+{
+  time_t ts = pch_timestamp(which);
+  if (ts != -1)
+    {
+      struct tm *tm = localtime(&ts);
+      strftime(timebuf, 37, "\t%Y-%m-%d %H:%M:%S.000000000 %z", tm);
+    }
+  else
+    timebuf[0] = 0;
+  return timebuf;
+}
+
+/* Write a header in a reject file that combines multiple hunks. */
+static void
+reject_header (const char *outname)
+{
+    char timebuf0[37], timebuf1[37];
+    if (!global_reject)
+      return;
+    if (diff_type == UNI_DIFF)
+   fprintf(rejfp, "--- %s.orig%s\n+++ %s%s\n",
+        outname, format_timestamp(timebuf0, reverse),
+        outname, format_timestamp(timebuf1, !reverse));
+    else
+   fprintf(rejfp, "*** %s.orig%s\n--- %s%s\n",
+        outname, format_timestamp(timebuf0, reverse),
+        outname, format_timestamp(timebuf1, !reverse));
+}
+
+static char *
+format_linerange (char rangebuf[LINENUM_LENGTH_BOUND*2 + 2],
+		  LINENUM first, LINENUM lines)
+{
+    if (lines == 1)
+      rangebuf = format_linenum (rangebuf, first);
+    else
+      {
+	char *rb;
+	rangebuf = format_linenum (rangebuf + LINENUM_LENGTH_BOUND + 1, lines);
+	rb = rangebuf-1;
+	rangebuf = format_linenum (rangebuf - LINENUM_LENGTH_BOUND - 1,
+				   (lines > 0) ? first : 0);
+	*rb = ',';
+      }
+    return rangebuf;
+}
+
 /* We did not find the pattern, dump out the hunk so they can handle it. */
 
 static void
@@ -943,8 +1030,83 @@ abort_hunk (void)
       (int) NEW_CONTEXT_DIFF <= (int) diff_type ? " ****" : "";
     char const *minuses =
       (int) NEW_CONTEXT_DIFF <= (int) diff_type ? " ----" : " -----";
+    char const *function = pch_c_function();
+    if (function == NULL)
+	function = "";
+
+    if (unified_reject_files)
+      {
+	/* produce unified reject files */
+	char rangebuf0[LINENUM_LENGTH_BOUND*2 + 2];
+	char rangebuf1[LINENUM_LENGTH_BOUND*2 + 2];
+	LINENUM j;
+
+	/* Find the beginning of the remove and insert section. */
+	for (j = 0; j <= pat_end; j++)
+	  if (pch_char (j) == '=')
+	    break;
+	for (i = j+1; i <= pat_end; i++)
+	  if (pch_char (i) == '^')
+	    break;
+	if (pch_char (0) != '*' || j > pat_end || i > pat_end+1)
+	  fatal ("internal error in abort_hunk");
+	i = 1; j++;
+
+	/* @@ -from,lines +to,lines @@ */
+	fprintf (rejfp, "@@ -%s +%s @@%s\n",
+		 format_linerange (rangebuf0, oldfirst, pch_ptrn_lines()),
+		 format_linerange (rangebuf1, newfirst, pch_repl_lines()),
+		 function);
+
+	while (   (i <= pat_end && pch_char (i) != '=')
+	       || (j <= pat_end && pch_char (j) != '^'))
+	  {
+	    if (i <= pat_end
+		&& (pch_char (i) == '-' || pch_char (i) == '!'))
+	      {
+		fputc('-', rejfp);
+		pch_write_line (i++, rejfp);
+	      }
+	    else if (j <= pat_end
+		     && (pch_char (j) == '+' || pch_char (j) == '!'))
+	      {
+		fputc('+', rejfp);
+		pch_write_line (j++, rejfp);
+	      }
+	    else if ((i <= pat_end
+		      && (pch_char (i) == ' ' || pch_char (i) == '\n')) &&
+		     (j > pat_end
+		      || (pch_char (j) == ' ' || pch_char (j) == '\n')))
+	      {
+		/* Unless j is already past the end, lines i and j
+		   must be equal here.  */
+
+		if (pch_char (i) == ' ')
+		  fputc(' ', rejfp);
+		pch_write_line (i++, rejfp);
+		if (j <= pat_end)
+		  j++;
+	      }
+	    else if ((j <= pat_end &&
+		     (pch_char (j) == ' ' || pch_char (j) == '\n')) &&
+		     (pch_char (i) == '='))
+	      {
+		if (pch_char (j) == ' ')
+		  fputc(' ', rejfp);
+		pch_write_line (j++, rejfp);
+	      }
+	    else
+	      fatal ("internal error in abort_hunk");
+	  }
 
-    fprintf(rejfp, "***************\n");
+	if (ferror (rejfp))
+	  write_fatal ();
+	return;
+      }
+
+    /* produce context type reject files */
+   
+    fprintf(rejfp, "***************%s\n", function);
     for (i=0; i<=pat_end; i++) {
 	char numbuf0[LINENUM_LENGTH_BOUND + 1];
 	char numbuf1[LINENUM_LENGTH_BOUND + 1];
@@ -1014,7 +1176,8 @@ apply_hunk (struct outstate *outstate, L
 		    def_state = IN_IFNDEF;
 		}
 		else if (def_state == IN_IFDEF) {
-		    fprintf (fp, outstate->after_newline + else_defined);
+		    fprintf (fp, outstate->after_newline + else_defined,
+		    	     R_do_defines);
 		    def_state = IN_ELSE;
 		}
 		if (ferror (fp))
@@ -1033,7 +1196,8 @@ apply_hunk (struct outstate *outstate, L
 		return false;
 	    if (R_do_defines) {
 		if (def_state == IN_IFNDEF) {
-		    fprintf (fp, outstate->after_newline + else_defined);
+		    fprintf (fp, outstate->after_newline + else_defined,
+		    	     R_do_defines);
 		    def_state = IN_ELSE;
 		}
 		else if (def_state == OUTSIDE) {
@@ -1081,7 +1245,8 @@ apply_hunk (struct outstate *outstate, L
 	    while (pch_char (old) == '!');
 
 	    if (R_do_defines) {
-		fprintf (fp, outstate->after_newline + else_defined);
+		fprintf (fp, outstate->after_newline + else_defined,
+			 R_do_defines);
 		if (ferror (fp))
 		  write_fatal ();
 		def_state = IN_ELSE;
@@ -1100,7 +1265,8 @@ apply_hunk (struct outstate *outstate, L
 	    old++;
 	    new++;
 	    if (R_do_defines && def_state != OUTSIDE) {
-		fprintf (fp, outstate->after_newline + end_defined);
+		fprintf (fp, outstate->after_newline + end_defined,
+			 R_do_defines);
 		if (ferror (fp))
 		  write_fatal ();
 		outstate->after_newline = true;
@@ -1118,7 +1284,8 @@ apply_hunk (struct outstate *outstate, L
 		def_state = IN_IFDEF;
 	    }
 	    else if (def_state == IN_IFNDEF) {
-		fprintf (fp, outstate->after_newline + else_defined);
+		fprintf (fp, outstate->after_newline + else_defined,
+			 R_do_defines);
 		def_state = IN_ELSE;
 	    }
 	    if (ferror (fp))
@@ -1137,7 +1304,8 @@ apply_hunk (struct outstate *outstate, L
 	while (new <= pat_end && pch_char (new) == '+');
     }
     if (R_do_defines && def_state != OUTSIDE) {
-	fprintf (fp, outstate->after_newline + end_defined);
+	fprintf (fp, outstate->after_newline + end_defined,
+		 R_do_defines);
 	if (ferror (fp))
 	  write_fatal ();
 	outstate->after_newline = true;
diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' patch-2.5.9-orig/patch.man patch-2.5.9-src/patch.man
--- patch-2.5.9-orig/patch.man	2002-05-25 12:36:44.000000000 +0200
+++ patch-2.5.9-src/patch.man	2007-04-24 22:37:42.968750000 +0200
@@ -517,6 +517,18 @@ instead of the default
 .B \&.rej
 file.
 .TP
+.BI \*=global\-reject\-file= rejectfile
+Put all rejects into
+.I rejectfile
+instead of creating separate reject files for all files that have rejects. The
+.I rejectfile
+will contain headers that identify which file each reject refers to. Note that
+the global reject file is created even if \-\-dry\-run is specified (while
+non-global reject files will only be created without \-\-dry\-run).
+.TP
+\fB\*=unified\-reject\-files\fP
+Produce unified reject files. The default is to produce context type reject files.
+.TP
 \fB\-R\fP  or  \fB\*=reverse\fP
 Assume that this patch was created with the old and new files swapped.
 (Yes, I'm afraid that does happen occasionally, human nature being what it
diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' patch-2.5.9-orig/pch.c patch-2.5.9-src/pch.c
--- patch-2.5.9-orig/pch.c	2003-05-20 16:03:17.000000000 +0200
+++ patch-2.5.9-src/pch.c	2007-04-24 22:32:25.484375000 +0200
@@ -1,6 +1,6 @@
 /* reading patches */
 
-/* $Id: pch.c,v 1.44 2003/05/20 14:03:17 eggert Exp $ */
+/* $Id: pch.c,v 1.45 2003/07/02 22:19:21 eggert Exp $ */
 
 /* Copyright (C) 1986, 1987, 1988 Larry Wall
 
@@ -68,6 +68,7 @@ static LINENUM p_sline;			/* and the lin
 static LINENUM p_hunk_beg;		/* line number of current hunk */
 static LINENUM p_efake = -1;		/* end of faked up lines--don't free */
 static LINENUM p_bfake = -1;		/* beg of faked up lines */
+static char *p_c_function;		/* the C function a hunk is in */
 
 enum nametype { OLD, NEW, INDEX, NONE };
 
@@ -366,10 +367,16 @@ intuit_diff_type (void)
 	if (!stars_last_line && strnEQ(s, "*** ", 4))
 	    name[OLD] = fetchname (s+4, strippath, &p_timestamp[OLD]);
 	else if (strnEQ(s, "+++ ", 4))
+	  {
 	    /* Swap with NEW below.  */
 	    name[OLD] = fetchname (s+4, strippath, &p_timestamp[OLD]);
+	    p_strip_trailing_cr = strip_trailing_cr;
+	  }
 	else if (strnEQ(s, "Index:", 6))
+	  {
 	    name[INDEX] = fetchname (s+6, strippath, (time_t *) 0);
+	    p_strip_trailing_cr = strip_trailing_cr;
+	  }
 	else if (strnEQ(s, "Prereq:", 7)) {
 	    for (t = s + 7;  ISSPACE ((unsigned char) *t);  t++)
 	      continue;
@@ -409,6 +416,7 @@ intuit_diff_type (void)
 		    p_timestamp[NEW] = timestamp;
 		    p_rfc934_nesting = (t - s) >> 1;
 		  }
+		p_strip_trailing_cr = strip_trailing_cr;
 	      }
 	  }
 	if ((diff_type == NO_DIFF || diff_type == ED_DIFF) &&
@@ -881,6 +889,19 @@ another_hunk (enum diff difftype, bool r
 	    next_intuit_at(line_beginning,p_input_line);
 	    return chars_read == (size_t) -1 ? -1 : 0;
 	}
+	s = buf;
+	while (*s == '*')
+	    s++;
+	if (*s == ' ')
+	  {
+	    p_c_function = s;
+	    while (*s != '\n')
+		s++;
+	    *s = '\0';
+	    p_c_function = savestr (p_c_function);
+	  }
+	else
+	    p_c_function = NULL;
 	p_hunk_beg = p_input_line + 1;
 	while (p_end < p_max) {
 	    chars_read = get_line ();
@@ -1270,8 +1291,18 @@ another_hunk (enum diff difftype, bool r
 	else
 	    p_repl_lines = 1;
 	if (*s == ' ') s++;
-	if (*s != '@')
+	if (*s++ != '@')
 	    malformed ();
+	if (*s++ == '@' && *s == ' ' && *s != '\0')
+	  {
+	    p_c_function = s;
+	    while (*s != '\n')
+		s++;
+	    *s = '\0';
+	    p_c_function = savestr (p_c_function);
+	  }
+	else
+	    p_c_function = NULL;
 	if (!p_ptrn_lines)
 	    p_first++;			/* do append rather than insert */
 	if (!p_repl_lines)
@@ -1877,6 +1908,12 @@ pch_hunk_beg (void)
     return p_hunk_beg;
 }
 
+char const *
+pch_c_function (void)
+{
+    return p_c_function;
+}
+
 /* Is the newline-terminated line a valid `ed' command for patch
    input?  If so, return the command character; if not, return 0.
    This accepts accepts just a subset of the valid commands, but it's
diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' patch-2.5.9-orig/pch.h patch-2.5.9-src/pch.h
--- patch-2.5.9-orig/pch.h	2003-05-20 15:56:02.000000000 +0200
+++ patch-2.5.9-src/pch.h	2007-04-24 22:32:25.562500000 +0200
@@ -25,6 +25,7 @@
 LINENUM pch_end (void);
 LINENUM pch_first (void);
 LINENUM pch_hunk_beg (void);
+char const *pch_c_function (void);
 LINENUM pch_newfirst (void);
 LINENUM pch_prefix_context (void);
 LINENUM pch_ptrn_lines (void);
diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' patch-2.5.9-orig/quotearg.c patch-2.5.9-src/quotearg.c
--- patch-2.5.9-orig/quotearg.c	2002-11-23 07:45:49.000000000 +0100
+++ patch-2.5.9-src/quotearg.c	2005-03-24 00:18:53.000000000 +0100
@@ -25,6 +25,14 @@
 
 #include "xalloc.h"
 
+#ifndef DEFAULT_OS_QUOTING_STYLE
+# define DEFAULT_OS_QUOTING_STYLE shell_quoting_style
+#endif
+
+#ifdef DEFAULT_OS_QUOTING_STYLE_DCL
+ DEFAULT_OS_QUOTING_STYLE_DCL
+#endif
+
 #include <ctype.h>
 #include <errno.h>
 #include <limits.h>
@@ -87,12 +95,15 @@ struct quoting_options
 /* Names of quoting styles.  */
 char const *const quoting_style_args[] =
 {
+  "default",
   "literal",
   "shell",
   "shell-always",
   "c",
   "escape",
   "locale",
+  "dos-shell",
+  "nt-shell",
   "clocale",
   0
 };
@@ -100,11 +111,14 @@ char const *const quoting_style_args[] =
 /* Correspondences to quoting style names.  */
 enum quoting_style const quoting_style_vals[] =
 {
+  default_quoting_style, 
   literal_quoting_style,
   shell_quoting_style,
   shell_always_quoting_style,
   c_quoting_style,
   escape_quoting_style,
+  dos_shell_quoting_style,
+  nt_shell_quoting_style,
   locale_quoting_style,
   clocale_quoting_style
 };
@@ -137,6 +151,8 @@ get_quoting_style (struct quoting_option
 void
 set_quoting_style (struct quoting_options *o, enum quoting_style s)
 {
+  if (s == default_quoting_style)
+    s = DEFAULT_OS_QUOTING_STYLE;
   (o ? o : &default_quoting_options)->style = s;
 }
 
@@ -186,12 +202,15 @@ quotearg_buffer_restyled (char *buffer, 
 			  enum quoting_style quoting_style,
 			  struct quoting_options const *o)
 {
+  unsigned char c;
   size_t i;
   size_t len = 0;
+  int quote_mark;
   char const *quote_string = 0;
   size_t quote_string_len = 0;
   int backslash_escapes = 0;
   int unibyte_locale = MB_CUR_MAX == 1;
+  struct quoting_options const *p = o ? o : &default_quoting_options;
 
 #define STORE(c) \
     do \
@@ -243,6 +262,66 @@ quotearg_buffer_restyled (char *buffer, 
       }
       break;
 
+    case shell_quoting_style:
+    case dos_shell_quoting_style:
+    case nt_shell_quoting_style:
+      if (! (argsize == (size_t) -1 ? arg[0] == '\0' : argsize == 0))
+     {
+       switch (arg[0])
+         {
+         case '#': case '~':
+           if (quoting_style == shell_quoting_style)
+          break;
+
+           /* Fall through.  */
+         default:
+           for (i = 0; ; i++)
+          {
+            if (argsize == (size_t) -1 ? arg[i] == '\0' : i == argsize)
+              goto done;
+
+            c = arg[i];
+
+            switch (c)
+              {
+              case ' ': case '\t':
+              case '<': case '>': case '|':
+              case '"': case '\'':
+              case '*': case '?': case '[':
+              case '&': /* special in [4N]DOS.COM and in CMD.EXE */
+              case '^': /* special in old /bin/sh, e.g. SunOS 4.1.4
+                     and in [4N]DOS.COM  */
+                goto needs_quoting;
+              case '.': /* `...': special in DJGPP wildcard expansion */
+                if (quoting_style != shell_quoting_style
+                 && arg[i+1] == '.' && arg[i+2] == '.'
+                 && strchr ("\\/", arg[i+3]))
+               goto needs_quoting;
+              case '!': /* special in csh */
+              case '$': case '`':
+              case '(': case ')': case ';':
+              case '\\': case '\n':
+                if (quoting_style == shell_quoting_style)
+               goto needs_quoting;
+              case '%':
+                if (quoting_style == dos_shell_quoting_style)
+               goto needs_quoting;
+              }
+
+            if (p->quote_these_too[c / INT_BITS] & (1 << (c % INT_BITS)))
+              goto needs_quoting;
+
+            STORE (c);
+          }
+         needs_quoting:;
+
+           quote_mark = quoting_style == shell_quoting_style ? '\'' : '"';
+           len = 0;
+           break;
+         }
+     }
+      break;
+
     case shell_always_quoting_style:
       STORE ('\'');
       quote_string = "'";
@@ -348,13 +427,17 @@ quotearg_buffer_restyled (char *buffer, 
 	case '\'':
 	  switch (quoting_style)
 	    {
+        case nt_shell_quoting_style:
+		case dos_shell_quoting_style:
 	    case shell_quoting_style:
 	      goto use_shell_always_quoting_style;
 
 	    case shell_always_quoting_style:
+          if (c == quote_mark) {
 	      STORE ('\'');
 	      STORE ('\\');
 	      STORE ('\'');
+		  }
 	      break;
 
 	    default:
@@ -362,7 +445,20 @@ quotearg_buffer_restyled (char *buffer, 
 	    }
 	  break;
 
-	case '%': case '+': case ',': case '-': case '.': case '/':
+	case '%':
+	  switch (quoting_style)
+	    {
+        case dos_shell_quoting_style:
+         if (c == '%')     /* need to double it under DOS shells */
+           {
+             STORE (c);
+             break;
+           }
+        default:
+          break;
+		 }
+		 
+	case '+': case ',': case '-': case '.': case '/':
 	case '0': case '1': case '2': case '3': case '4': case '5':
 	case '6': case '7': case '8': case '9': case ':': case '=':
 	case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
@@ -476,6 +572,7 @@ quotearg_buffer_restyled (char *buffer, 
     for (; *quote_string; quote_string++)
       STORE (*quote_string);
 
+done:
   if (len < buffersize)
     buffer[len] = '\0';
   return len;
diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' patch-2.5.9-orig/quotearg.h patch-2.5.9-src/quotearg.h
--- patch-2.5.9-orig/quotearg.h	2002-11-23 07:45:22.000000000 +0100
+++ patch-2.5.9-src/quotearg.h	2005-03-23 23:39:15.000000000 +0100
@@ -27,11 +27,14 @@
 /* Basic quoting styles.  */
 enum quoting_style
   {
+	default_quoting_style,  /* --quoting-style=default */
     literal_quoting_style,	/* --quoting-style=literal */
     shell_quoting_style,	/* --quoting-style=shell */
     shell_always_quoting_style,	/* --quoting-style=shell-always */
     c_quoting_style,		/* --quoting-style=c */
     escape_quoting_style,	/* --quoting-style=escape */
+    dos_shell_quoting_style,     /* --quoting-style=dos-shell */
+    nt_shell_quoting_style, /* --quoting-style=nt-shell */
     locale_quoting_style,	/* --quoting-style=locale */
     clocale_quoting_style	/* --quoting-style=clocale */
   };
diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' patch-2.5.9-orig/quotesys.c patch-2.5.9-src/quotesys.c
--- patch-2.5.9-orig/quotesys.c	1998-03-15 15:44:47.000000000 +0100
+++ patch-2.5.9-src/quotesys.c	2007-04-24 22:41:16.468750000 +0200
@@ -37,6 +37,12 @@ quote_system_arg (quoted, arg)
   char const *a;
   size_t len = 0;
 
+  /* A hook for non-Posix platforms to define a quoting
+     scheme peculiar to their implementation of `system'.  */
+#ifdef quote_system_arg_func
+  return quote_system_arg_func (quoted, arg);
+#else
+
   /* Scan ARG, copying it to QUOTED if QUOTED is not null,
      looking for shell metacharacters.  */
 
@@ -122,4 +128,5 @@ quote_system_arg (quoted, arg)
 	quoted[len] = c;
       len++;
     }
+#endif /* nonposix_quote_system_arg */
 }
diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' patch-2.5.9-orig/util.c patch-2.5.9-src/util.c
--- patch-2.5.9-orig/util.c	2003-05-20 16:04:53.000000000 +0200
+++ patch-2.5.9-src/util.c	2007-04-24 22:32:24.578125000 +0200
@@ -45,9 +45,17 @@
 # define raise(sig) kill (getpid (), sig)
 #endif
 
+#if defined(HAVE_STAT_TIMEVAL)
+#include <time.h>
+#endif
+
 #include <stdarg.h>
+#include <hash.h>
 
 static void makedirs (char *);
+static bool fid_search (const char *, const struct stat *, bool);
+# define fid_exists(name, pst) fid_search (name, pst, false)
+# define insert_fid(name) fid_search (name, NULL, true)
 
 /* Move a file FROM (where *FROM_NEEDS_REMOVAL is nonzero if FROM
    needs removal when cleaning up at the end of execution)
@@ -57,6 +65,49 @@ static void makedirs (char *);
    FROM_NEEDS_REMOVAL must be nonnull if FROM is nonnull.
    Back up TO if BACKUP is true.  */
 
+int
+s_is_chrblkfifosock (const char *path)
+{
+  int r;
+  struct stat st;
+
+  r = stat(path, &st);
+  if (r < 0)
+    return r;
+
+  return (((st.st_mode & S_IFMT) == S_IFCHR) ||
+	  ((st.st_mode & S_IFMT) == S_IFBLK) ||
+	  ((st.st_mode & S_IFMT) == S_IFIFO) ||
+	  ((st.st_mode & S_IFMT) == S_IFSOCK));
+}
+
+void
+cat_file_to_dev (const char *from, const char *to)
+{
+  size_t i;
+  int fromfd, tofd;
+
+  fromfd = open(from, O_RDONLY);
+  if (fromfd < 0)
+    pfatal("could not open %s for reading", quotearg(from));
+
+  tofd = open(to, O_WRONLY | O_NONBLOCK);
+  if (tofd < 0)
+    pfatal("could not open %s for writing", quotearg(to));
+
+  while ((i = read (fromfd, buf, bufsize)) != 0)
+    {
+      if (i == (size_t) -1)
+	read_fatal ();
+      if (write (tofd, buf, i) != i)
+	write_fatal ();
+    }
+  if (close (fromfd) != 0)
+    read_fatal ();
+  if (close (tofd) != 0)
+    write_fatal ();
+}
+
 void
 move_file (char const *from, int volatile *from_needs_removal,
 	   char *to, mode_t mode, bool backup)
@@ -64,7 +115,7 @@ move_file (char const *from, int volatil
   struct stat to_st;
   int to_errno = ! backup ? -1 : stat (to, &to_st) == 0 ? 0 : errno;
 
-  if (backup)
+  if (backup && (to_errno || ! fid_exists (to, &to_st)))
     {
       int try_makedirs_errno = 0;
       char *bakname;
@@ -123,6 +174,7 @@ move_file (char const *from, int volatil
 		 quotearg_n (0, to), quotearg_n (1, bakname));
 	  while (rename (to, bakname) != 0)
 	    {
+	      /* FIXME: copy if errno == EXDEV */
 	      if (errno != try_makedirs_errno)
 		pfatal ("Can't rename file %s to %s",
 			quotearg_n (0, to), quotearg_n (1, bakname));
@@ -133,6 +185,8 @@ move_file (char const *from, int volatil
 
       free (bakname);
     }
+  else
+    backup = false;
 
   if (from)
     {
@@ -153,6 +207,15 @@ move_file (char const *from, int volatil
 		goto rename_succeeded;
 	    }
 
+	  if (errno == EACCES && (s_is_chrblkfifosock(to) > 0))
+	    {
+	      cat_file_to_dev (from, to);
+	      if (backup)
+	        insert_fid (to);
+	      unlink(from);
+	      return;
+	    }
+
 	  if (errno == EXDEV)
 	    {
 	      if (! backup)
@@ -165,6 +228,8 @@ move_file (char const *from, int volatil
 	      if (! to_dir_known_to_exist)
 		makedirs (to);
 	      copy_file (from, to, 0, mode);
+	      if (backup)
+		insert_fid (to);
 	      return;
 	    }
 
@@ -173,6 +238,8 @@ move_file (char const *from, int volatil
 	}
 
     rename_succeeded:
+      if (backup)
+	insert_fid (to);
       /* Do not clear *FROM_NEEDS_REMOVAL if it's possible that the
 	 rename returned zero because FROM and TO are hard links to
 	 the same file.  */
@@ -1011,3 +1078,105 @@ Fseek (FILE *stream, file_offset offset,
   if (file_seek (stream, offset, ptrname) != 0)
     pfatal ("fseek");
 }
+
+typedef struct
+{
+  dev_t		fid_dev;
+  ino_t		fid_ino;
+  time_t	fid_mtime;
+  unsigned long	fid_mtimensec;
+} file_id;
+
+unsigned
+file_id_hasher (file_id *entry, unsigned table_size)
+{
+  return ((unsigned long) entry->fid_ino +
+  	  (unsigned long) entry->fid_dev +
+  	  (unsigned long) entry->fid_mtime +
+	  (unsigned long) entry->fid_mtimensec) % table_size;
+}
+
+bool
+file_id_comparator (file_id *entry1, file_id *entry2)
+{
+  return (entry1->fid_dev	== entry2->fid_dev &&
+	  entry1->fid_ino	== entry2->fid_ino &&
+	  entry1->fid_mtime	== entry2->fid_mtime &&
+	  entry1->fid_mtimensec == entry2->fid_mtimensec);
+}
+
+void
+file_id_freer (file_id *entry)
+{
+  free (entry);
+}
+
+Hash_table *file_id_hash;
+
+/* Check if the file identified by FILENAME and PST was already seen. If the
+   file was already seen, returns TRUE.  If the file has not yet been seen
+   and INSERT is TRUE, it is inserted.  PST or FILENAME may be NULL (but not
+   both of them).  */
+
+static bool
+fid_search (const char *filename, const struct stat *pst, bool insert)
+{
+  struct stat st;
+
+  if (!file_id_hash)
+    {
+      file_id_hash = hash_initialize (0, NULL, (Hash_hasher) file_id_hasher,
+				      (Hash_comparator) file_id_comparator,
+				      (Hash_data_freer) file_id_freer);
+      if (!file_id_hash)
+	pfatal ("hash_initialize");
+    }
+
+  if (!pst)
+    {
+      if (stat (filename, &st) != 0)
+	pfatal ("%s", quotearg (filename));
+      pst = &st;
+    }
+
+  if (insert)
+    {
+      file_id *pfid = xmalloc (sizeof (file_id)), *old_pfid;
+      pfid->fid_dev	  = pst->st_dev;
+      pfid->fid_ino	  = pst->st_ino;
+      pfid->fid_mtime	  = pst->st_mtime;
+#if defined(HAVE_STAT_NSEC)
+      pfid->fid_mtimensec = pst->st_mtimensec;
+#elif defined(HAVE_STAT_TIMEVAL)
+      pfid->fid_mtimensec = pst->st_mtim.tv_nsec;
+#else
+      pfid->fid_mtimensec = 0;
+#endif
+      old_pfid = hash_insert (file_id_hash, pfid);
+      if (!old_pfid)
+	pfatal ("hash_insert");
+      else if (old_pfid != pfid)
+        {
+	  free (pfid);
+	  return true;
+	}
+      else
+	return false;
+    }
+  else
+    {
+      file_id fid;
+      fid.fid_dev	= pst->st_dev;
+      fid.fid_ino	= pst->st_ino;
+      fid.fid_mtime	= pst->st_mtime;
+#if defined(HAVE_STAT_NSEC)
+      fid.fid_mtimensec = pst->st_mtimensec;
+#elif defined(HAVE_STAT_TIMEVAL)
+      fid.fid_mtimensec = pst->st_mtim.tv_nsec;
+#else
+      fid.fid_mtimensec = 0;
+#endif
+      return hash_lookup (file_id_hash, &fid) != 0;
+    }
+}
+
diff -ipuwr --binary --strip-trailing-cr -x '*.bak' -x '*.orig' -x '*.rej' -x '*.new' -x '*~' -x debian -x '*.po' -x '*.pot' patch-2.5.9-orig/util.h patch-2.5.9-src/util.h
--- patch-2.5.9-orig/util.h	2003-05-20 15:56:48.000000000 +0200
+++ patch-2.5.9-src/util.h	2007-04-24 22:32:23.656250000 +0200
@@ -57,3 +57,4 @@ void remove_prefix (char *, size_t);
 void removedirs (char *);
 void set_signals (bool);
 void write_fatal (void) __attribute__ ((noreturn));
+int s_is_chrblkfifosock (const char *);
